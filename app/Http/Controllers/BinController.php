<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Auth;
use App\Bin;
use App\BinLog;
use Illuminate\Support\Str;
use Pixelfed\Snowflake\Snowflake;

class BinController extends Controller
{
	public function create(Request $request)
	{
		$this->validate($request, [
			'name' => 'nullable|string|max:40',
			'description' => 'nullable|string|max:250',
			//'scope' => 'required|in:public'
		]);

		if(Bin::count() >= config('fedidb.max_bins')) {
			return redirect('/')->with('error', 'Error: We\'re at max capacity for active request bins. Please try again later.');
		}

		if(config('fedidb.limit_ip') && Bin::whereIp($request->ip())->count() > 5) {
			return redirect('/')->with('error', 'Error: You cannot exceed 5 bins per IP address. Please try again later.');
		}

		$id = (new Snowflake())->next();

		$bin = new Bin;
		$bin->user_id = null;
		$bin->ip = $request->ip();
		$bin->shortcode = $id;
		$bin->name = e($request->input('name'));
		$bin->description = e($request->input('description'));
		$bin->scope = 'public';
		$bin->delete_after = now()->addHours(config('fedidb.bin_expire_hours'));
		$bin->save();

		return redirect($bin->shortcodeUrl());
	}

	public function view(Request $request, $id)
	{
		$bin = Bin::whereShortcode($id)->firstOrFail();
		// abort_if($bin->scope != 'public' && !$request->user(), 404);
		// abort_if($bin->scope != 'public' && $request->user()->id != $bin->user_id, 404);
		$adminMode = false; //Auth::id() == $bin->user_id;
		return view('services.request-bin.home', compact('bin', 'adminMode'));

	}

	public function actor(Request $request, $id)
	{
		$bin = Bin::whereShortcode($id)->firstOrFail();
		$domain = config('fedidb.app_domain');
		$res = [
			'@context' => 'https://www.w3.org/ns/activitystreams',
			'id' => $bin->actorUrl(),
			'type' => 'Person',
			'following' => $bin->actorUrl('/following'),
			'followers' => $bin->actorUrl('/followers'),
			'inbox' => $bin->inboxUrl(),
			'outbox' => $bin->outboxUrl(),
			'preferredUsername' => $bin->shortcode,
			'name' => 'FediDB Actor',
			'summary' => 'This account was generated by https://'.$domain.' for federation testing.',
			'url' => $bin->actorUrl(),
			'manuallyApprovesFollowers' => false,
			'publicKey' => [
				'id' => $bin->actorUrl('#main-key'),
				'owner' => $bin->actorUrl(),
				'publicKeyPem' => $bin->public_key
			],
			'icon' => [
				'type' => 'Image',
				'mediaType' => 'image/png',
				'url' => url('/static/ec/avatar.png')
			]
		];
		return response()->json($res, 200, [], JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES)->header('Content-Type', 'application/activity+json');
	}

	public function actorFollowing(Request $request, $id)
	{
		$bin = Bin::whereShortcode($id)->firstOrFail();

		$res = [
			'@context' => 'https://www.w3.org/ns/activitystreams',
			'id' => $bin->actorUrl('/following'),
			'type' => 'OrderedCollection',
			'totalItems' => 0,
			'first' => $bin->actorUrl('/following?page=true'),
		];

		return response()->json($res, 200, [], JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES)->header('Content-Type', 'application/activity+json');
	}

	public function actorFollowers(Request $request, $id)
	{
		$bin = Bin::whereShortcode($id)->firstOrFail();

		$res = [
			'@context' => 'https://www.w3.org/ns/activitystreams',
			'id' => $bin->actorUrl('/followers'),
			'type' => 'OrderedCollection',
			'totalItems' => 0,
			'first' => $bin->actorUrl('/followers?page=true'),
		];

		return response()->json($res, 200, [], JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES)->header('Content-Type', 'application/activity+json');
	}

	public function actorOutbox(Request $request, $id)
	{
		$bin = Bin::whereShortcode($id)->firstOrFail();

		$res = [
			'@context' => 'https://www.w3.org/ns/activitystreams',
			'id' => $bin->actorUrl('/outbox'),
			'type' => 'OrderedCollection',
			'totalItems' => 0,
			'first' => $bin->actorUrl('/outbox?page=true'),
			'last' => $bin->actorUrl('/outbox?min_id=0&page=true')
		];

		return response()->json($res, 200, [], JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES)->header('Content-Type', 'application/activity+json');
	}

	public function actorInbox(Request $request, $id)
	{
		$bin = Bin::whereShortcode($id)->firstOrFail();

		$body = $request->getContent();
		$bodyDecoded = json_decode($body, true, 12);
		$headers = collect($request->headers->all())->filter(function($h, $i) {
			return in_array(strtolower($i), ['date','host','digest','signature','accept','content-type','content-length']) == true;
		});

		$log = new BinLog;
		$log->bin_id = $bin->id;
		$log->actor = json_encode([]);
		$log->headers = json_encode($headers);
		$log->object = $body;
		$log->method = 'POST';
		$log->activity_verb = $bodyDecoded['type'];
		$log->valid_signature = null;
		$log->valid_object = null;
		$log->valid_actor = null;
		$log->save();

		return 200;
	}

	public function binLogs(Request $request, $id)
	{
		$bin = Bin::whereShortcode($id)->firstOrFail();
		abort_if($bin->scope != 'public' && !$request->user(), 404);
		abort_if($bin->scope != 'public' && $request->user()->id != $bin->user_id, 404);

		if($bin->logs()->count()) {
			return $bin->logs()->latest()->take(9)->get()->map(function($l) {
				return [
					'id' => (string) $l->id,
					'actor' => json_decode($l->actor),
					'headers' => json_decode($l->headers),
					'object' => json_decode($l->object),
					'verb' => $l->activity_verb,
					'method' => $l->method,
					'valid_signature' => $l->valid_signature,
					'valid_object' => $l->valid_object,
					'valid_actor' => $l->valid_actor,
					'created_at' => $l->created_at
				];
			});
		}
	}

	public function postObject(Request $request, $id)
	{
		$bin = Bin::whereShortcode($id)->firstOrFail();

		$obj = [
			"@context" => "https://www.w3.org/ns/activitystreams",
			"id" => $bin->actorUrl('/content/post.json'),
			"type" => "Note",
			"summary" => null,
			"inReplyTo" => null,
			"published" => $bin->created_at->format('c'),
			"url" => $bin->actorUrl('/content/post.json'),
			"attributedTo" => $bin->actorUrl(),
			"to" => [
				"https://www.w3.org/ns/activitystreams#Public",
			],
			"cc" => [
				$bin->actorUrl('/followers')
			],
			"sensitive" => false,
			"content" => "<p>test post</p>",
			"attachment" => [],
			"tag" => [],
			"replies" => [],
		];

		return response()->json($obj, 200, [], JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES)->header('Content-Type', 'application/activity+json');
	}

	public function postAttachmentObject(Request $request, $id)
	{
		$bin = Bin::whereShortcode($id)->firstOrFail();

		$obj = [
			"@context" => "https://www.w3.org/ns/activitystreams",
			"id" => $bin->actorUrl('/content/post_with_attachment.json'),
			"type" => "Note",
			"summary" => null,
			"inReplyTo" => null,
			"published" => $bin->created_at->format('c'),
			"url" => $bin->actorUrl('/content/post_with_attachment.json'),
			"attributedTo" => $bin->actorUrl(),
			"to" => [
				"https://www.w3.org/ns/activitystreams#Public",
			],
			"cc" => [
				$bin->actorUrl('/followers')
			],
			"sensitive" => false,
			"content" => "<p>test post with photo attached ;)</p>",
			"attachment" => [[
				"type" => "Document",
				"mediaType" => "image/jpeg",
				"name" => null,
				"url" => url(Bin::EXAMPLE_PHOTO)
			]],
			"tag" => [],
			"replies" => [],
		];

		return response()->json($obj, 200, [], JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES)->header('Content-Type', 'application/activity+json');
	}
}
